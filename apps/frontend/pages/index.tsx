import type { NextPage } from 'next'
import Head from 'next/head'
import nookies from 'nookies'
import { useEffect, useState, createContext, useReducer } from 'react'
import styles from '../styles/Home.module.css'
import { getCSRF, getProtected, postLogout, postRefresh, postSignIn, postSignUp, getUser, apiClient } from '../modules/auth/auth'
import jsonwebtoken from 'jsonwebtoken'

const SessionContext = createContext({});

const Home: NextPage<{user:any, token :any }> = ({ user, token }) => {
  const [state, setState] = useState<string[]>([]);
  const [isAuth, setIsAuth] = useState<boolean>(!!token);

  if (!apiClient.defaults.headers.common['Authorization']) {
    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }

  return (
    <SessionContext.Provider value={{ user, isAuth }}>
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>

        <h1 style={{ color:  isAuth ? 'green' : 'red '}}>
          Is logged: {(!!isAuth).toString()}
        </h1>

        <a href="http://localhost:4000/auth/github">
          <button>Github signIn</button>
        </a>
        <button onClick={() => {
          postSignUp({
            "email": "test@gmail.pl",
            "password": "pass"
          });
        }}>Sign Up Email</button>

        
        <button onClick={async () => {
          const body = await postSignIn({
            "email": "test@gmail.pl",
            "password": "pass"
          });
          setIsAuth(true)
        }}>Login</button>

        <button onClick={() => {
          postLogout();
          setIsAuth(false)
        }}>Logout</button>

        <button onClick={async () => {
          const body = await postRefresh();
        }}>RefreshToken</button>

        <button onClick={async () => {
          try {
            const body = await getProtected();
            setState(body.data);
          } catch (error) {
            setState(['missing', 'access', 'token']);
          }
        }}>Protected</button>

        <ul>
          {state?.map(el => <li key={el}>{el}</li>)}
        </ul>
        
      </main>
    </div>
    </SessionContext.Provider>
  )
}

export async function getServerSideProps(context: any) {
  const { RefreshToken } = nookies.get(context) || {};
  let user = null;
  let token = '';
  
  try {
    const res = await postRefresh(null, {
      headers: {
        Cookie: `RefreshToken=${RefreshToken}`
      }
    });
    
    token = res?.data?.accessToken;
    nookies.set(context, 'RefreshToken', res?.data?.refreshToken);
    user = jsonwebtoken.decode(res?.data?.refreshToken) || null;
  } catch (error) {
    console.error('error refresh token');
  }

  return {
    props: { 
      user,
      token
    }
  }
}

export default Home
