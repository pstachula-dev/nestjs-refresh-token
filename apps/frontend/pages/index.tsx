import type { NextPage, GetServerSideProps } from "next";
import Head from "next/head";
import nookies from "nookies";
import { useState, createContext } from "react";
import styles from "../styles/Home.module.css";
import {
  getProtected,
  postLogout,
  postRefresh,
  postSignIn,
  postSignUp,
  apiClient,
} from "../modules/auth/auth";
import jsonwebtoken from "jsonwebtoken";

const HARDCODED_USER = {
  email: "test@gmail.pl",
  password: "pass",
};

export type User = {
  id: number;
  email: string;
};

const SessionContext = createContext<{
  user: User | null;
  isAuth: boolean;
}>({
  user: null,
  isAuth: false,
});

const Home: NextPage<{ user: User | null; token: string }> = ({
  user,
  token,
}) => {
  const [state, setState] = useState<string[]>([]);
  const [isAuth, setIsAuth] = useState<boolean>(!!token);

  if (!apiClient.defaults.headers.common["Authorization"]) {
    apiClient.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  }

  console.log({ user, isAuth });

  return (
    <SessionContext.Provider value={{ user, isAuth }}>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
          <h1 style={{ color: isAuth ? "green" : "red " }}>
            Is logged: {(!!isAuth).toString()}
          </h1>

          <a href="http://localhost:4000/auth/github">
            <button>Github signIn</button>
          </a>
          <button
            onClick={() => {
              postSignUp(HARDCODED_USER);
            }}
          >
            Sign Up Email
          </button>

          <button
            onClick={async () => {
              await postSignIn(HARDCODED_USER);
              setIsAuth(true);
            }}
          >
            Login
          </button>

          <button
            onClick={() => {
              postLogout();
              setIsAuth(false);
            }}
          >
            Logout
          </button>

          <button
            onClick={async () => {
              try {
                const body = await getProtected();
                setState(body.data);
              } catch (error) {
                setState(["missing", "access", "token"]);
              }
            }}
          >
            Protected
          </button>

          <ul>
            {state?.map((el) => (
              <li key={el}>{el}</li>
            ))}
          </ul>
        </main>
      </div>
    </SessionContext.Provider>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { RefreshToken } = nookies.get(context);
  let user = null;
  let token = "";

  try {
    const res = await postRefresh({
      headers: {
        Cookie: `RefreshToken=${RefreshToken}`,
      },
    });

    token = res?.data?.accessToken;
    nookies.set(context, "RefreshToken", res?.data?.refreshToken);
    user = jsonwebtoken.decode(
      res?.data?.refreshToken
    ) as jsonwebtoken.JwtPayload;
  } catch (error) {
    console.error("error refresh token");
  }

  console.log(user);

  return {
    props: {
      user,
      token,
    },
  };
};

export default Home;
